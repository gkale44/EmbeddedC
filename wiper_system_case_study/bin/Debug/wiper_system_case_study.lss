
bin\Debug\wiper_system_case_study.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000004de  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 000000a0  00000000  00000000  000004e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e2  00000000  00000000  00000581  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000039b  00000000  00000000  00000663  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000260  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e2  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000144  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_1>
   8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  88:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <AUTO_MODE>:
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>

void AUTO_MODE()
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <AUTO_MODE+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
    uint16_t ADC_value=0x00;
  9a:	1a 82       	std	Y+2, r1	; 0x02
  9c:	19 82       	std	Y+1, r1	; 0x01
    ADMUX &=0x00;
    ADMUX |= (1 << REFS0);
    ADCSRA |= (1<< ADEN);*/
    while(1)
    {
        ADCSRA |= (1 << ADSC);
  9e:	aa e7       	ldi	r26, 0x7A	; 122
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8c 93       	st	X, r24
        while (ADCSRA & (1 << ADSC));
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 2f       	mov	r24, r24
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	80 74       	andi	r24, 0x40	; 64
  b8:	90 70       	andi	r25, 0x00	; 0
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	b9 f7       	brne	.-18     	; 0xac <AUTO_MODE+0x1c>
        ADC_value=ADC;
  be:	e8 e7       	ldi	r30, 0x78	; 120
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	91 81       	ldd	r25, Z+1	; 0x01
  c6:	9a 83       	std	Y+2, r25	; 0x02
  c8:	89 83       	std	Y+1, r24	; 0x01

        if((ADC_value>=0) && (ADC_value<50))
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	82 33       	cpi	r24, 0x32	; 50
  d0:	91 05       	cpc	r25, r1
  d2:	20 f4       	brcc	.+8      	; 0xdc <AUTO_MODE+0x4c>
        {
            OCR0A = 0x00;
  d4:	e7 e4       	ldi	r30, 0x47	; 71
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
  da:	e1 cf       	rjmp	.-62     	; 0x9e <AUTO_MODE+0xe>
        }
        else if((ADC_value>=50) && (ADC_value<200))
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	82 33       	cpi	r24, 0x32	; 50
  e2:	91 05       	cpc	r25, r1
  e4:	50 f0       	brcs	.+20     	; 0xfa <AUTO_MODE+0x6a>
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	88 3c       	cpi	r24, 0xC8	; 200
  ec:	91 05       	cpc	r25, r1
  ee:	28 f4       	brcc	.+10     	; 0xfa <AUTO_MODE+0x6a>
        {
            OCR0A = 64;
  f0:	e7 e4       	ldi	r30, 0x47	; 71
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
  f8:	d2 cf       	rjmp	.-92     	; 0x9e <AUTO_MODE+0xe>
        }
        else if((ADC_value>=200) && (ADC_value<500))
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	88 3c       	cpi	r24, 0xC8	; 200
 100:	91 05       	cpc	r25, r1
 102:	58 f0       	brcs	.+22     	; 0x11a <AUTO_MODE+0x8a>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	9a 81       	ldd	r25, Y+2	; 0x02
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	84 3f       	cpi	r24, 0xF4	; 244
 10c:	92 07       	cpc	r25, r18
 10e:	28 f4       	brcc	.+10     	; 0x11a <AUTO_MODE+0x8a>
        {
            OCR0A = 128;
 110:	e7 e4       	ldi	r30, 0x47	; 71
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
 118:	c2 cf       	rjmp	.-124    	; 0x9e <AUTO_MODE+0xe>
        }
        else if((ADC_value>=500) && (ADC_value<1000))
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	84 3f       	cpi	r24, 0xF4	; 244
 122:	92 07       	cpc	r25, r18
 124:	58 f0       	brcs	.+22     	; 0x13c <AUTO_MODE+0xac>
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	23 e0       	ldi	r18, 0x03	; 3
 12c:	88 3e       	cpi	r24, 0xE8	; 232
 12e:	92 07       	cpc	r25, r18
 130:	28 f4       	brcc	.+10     	; 0x13c <AUTO_MODE+0xac>
        {
            OCR0A = 192;
 132:	e7 e4       	ldi	r30, 0x47	; 71
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 ec       	ldi	r24, 0xC0	; 192
 138:	80 83       	st	Z, r24
 13a:	b1 cf       	rjmp	.-158    	; 0x9e <AUTO_MODE+0xe>
        }
        else if(ADC_value>=1000)
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	23 e0       	ldi	r18, 0x03	; 3
 142:	88 3e       	cpi	r24, 0xE8	; 232
 144:	92 07       	cpc	r25, r18
 146:	08 f4       	brcc	.+2      	; 0x14a <AUTO_MODE+0xba>
 148:	aa cf       	rjmp	.-172    	; 0x9e <AUTO_MODE+0xe>
        {
            OCR0A = 255;
 14a:	e7 e4       	ldi	r30, 0x47	; 71
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	80 83       	st	Z, r24
 152:	a5 cf       	rjmp	.-182    	; 0x9e <AUTO_MODE+0xe>

00000154 <GPIO>:
#include "GPIO.h"
#include <avr/io.h>
#include <util/delay.h>

void GPIO()
{
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(DDRD,PD1);// Engine at input
 15c:	aa e2       	ldi	r26, 0x2A	; 42
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ea e2       	ldi	r30, 0x2A	; 42
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	8c 93       	st	X, r24
    CLR_BIT(PORTD,PD1);// sw1 connected at pin no 1
 16a:	ab e2       	ldi	r26, 0x2B	; 43
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	eb e2       	ldi	r30, 0x2B	; 43
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	8c 93       	st	X, r24

    CLR_BIT(DDRD,PD2); //Wiper at input
 178:	aa e2       	ldi	r26, 0x2A	; 42
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ea e2       	ldi	r30, 0x2A	; 42
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	8c 93       	st	X, r24
    CLR_BIT(PORTD,PD2);// sw2 connected at pin no 2
 186:	ab e2       	ldi	r26, 0x2B	; 43
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	eb e2       	ldi	r30, 0x2B	; 43
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	8c 93       	st	X, r24

    CLR_BIT(DDRC,PC0); //Rain Sensor at input
 194:	a7 e2       	ldi	r26, 0x27	; 39
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e7 e2       	ldi	r30, 0x27	; 39
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	8c 93       	st	X, r24
    CLR_BIT(PORTC,PC0);//Potentiometer connected at pin PC0
 1a2:	a8 e2       	ldi	r26, 0x28	; 40
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e8 e2       	ldi	r30, 0x28	; 40
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	8c 93       	st	X, r24

    SET_BIT(DDRD,PD6);//PWMout at output
 1b0:	aa e2       	ldi	r26, 0x2A	; 42
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	ea e2       	ldi	r30, 0x2A	; 42
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD6);// output at pin no 6
 1be:	ab e2       	ldi	r26, 0x2B	; 43
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	eb e2       	ldi	r30, 0x2B	; 43
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	8c 93       	st	X, r24

}
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <main>:
struct{
    volatile unsigned int FLAG_ISR0:1;
}FLAG_BIT;

int main(void)
{
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0x6>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
    GPIO();
 1dc:	0e 94 aa 00 	call	0x154	; 0x154 <GPIO>
    CLR_BIT(DDRD,PD1);// Engine at input
 1e0:	aa e2       	ldi	r26, 0x2A	; 42
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	ea e2       	ldi	r30, 0x2A	; 42
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD1);// sw1 connected at pin no 1
 1ee:	ab e2       	ldi	r26, 0x2B	; 43
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	eb e2       	ldi	r30, 0x2B	; 43
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	8c 93       	st	X, r24
    SET_BIT (PORTD,PD2);// PULL UP CONFIGURATION
 1fc:	ab e2       	ldi	r26, 0x2B	; 43
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	eb e2       	ldi	r30, 0x2B	; 43
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	8c 93       	st	X, r24

    CLR_BIT(DDRD,PD2); //Wiper at input
 20a:	aa e2       	ldi	r26, 0x2A	; 42
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	ea e2       	ldi	r30, 0x2A	; 42
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	8c 93       	st	X, r24
    //CLR_BIT(PORTD,PD2);// sw2 connected at pin no 2

    CLR_BIT(DDRC,PC0); //Rain Sensor at input
 218:	a7 e2       	ldi	r26, 0x27	; 39
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e7 e2       	ldi	r30, 0x27	; 39
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	8c 93       	st	X, r24
    CLR_BIT(PORTC,PC0);//Potentiometer connected at pin PC0
 226:	a8 e2       	ldi	r26, 0x28	; 40
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e8 e2       	ldi	r30, 0x28	; 40
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	8c 93       	st	X, r24

    SET_BIT(DDRD,PD6);//PWMout at output
 234:	aa e2       	ldi	r26, 0x2A	; 42
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	ea e2       	ldi	r30, 0x2A	; 42
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	8c 93       	st	X, r24
    CLR_BIT(PORTD,PD6);// output at pin no 6
 242:	ab e2       	ldi	r26, 0x2B	; 43
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	eb e2       	ldi	r30, 0x2B	; 43
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	8f 7b       	andi	r24, 0xBF	; 191
 24e:	8c 93       	st	X, r24
    EICRA |= (1 << ISC00);
 250:	a9 e6       	ldi	r26, 0x69	; 105
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e9 e6       	ldi	r30, 0x69	; 105
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	8c 93       	st	X, r24
    EICRA &= ~(1 << ISC01); //Any logical change will raise interrupt.
 25e:	a9 e6       	ldi	r26, 0x69	; 105
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	e9 e6       	ldi	r30, 0x69	; 105
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	8c 93       	st	X, r24
    EIMSK |= (1 << INT0); //Local Interrupt enable
 26c:	ad e3       	ldi	r26, 0x3D	; 61
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	ed e3       	ldi	r30, 0x3D	; 61
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	81 60       	ori	r24, 0x01	; 1
 278:	8c 93       	st	X, r24
    sei();
 27a:	78 94       	sei
    OCR0A = 0x00;
 27c:	e7 e4       	ldi	r30, 0x47	; 71
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	10 82       	st	Z, r1
    TCCR0B |= ((1 << CS00) | (1 << CS02));
 282:	a5 e4       	ldi	r26, 0x45	; 69
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	e5 e4       	ldi	r30, 0x45	; 69
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	85 60       	ori	r24, 0x05	; 5
 28e:	8c 93       	st	X, r24
    TCCR0B &= ~(1 << CS01);
 290:	a5 e4       	ldi	r26, 0x45	; 69
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	e5 e4       	ldi	r30, 0x45	; 69
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8d 7f       	andi	r24, 0xFD	; 253
 29c:	8c 93       	st	X, r24
    //sei();
    ADMUX &=0x00;
 29e:	ec e7       	ldi	r30, 0x7C	; 124
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	ec e7       	ldi	r30, 0x7C	; 124
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	10 82       	st	Z, r1
    ADMUX |= (1 << REFS0);
 2aa:	ac e7       	ldi	r26, 0x7C	; 124
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	ec e7       	ldi	r30, 0x7C	; 124
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	8c 93       	st	X, r24
    ADCSRA |= (1<< ADEN);
 2b8:	aa e7       	ldi	r26, 0x7A	; 122
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	8c 93       	st	X, r24
while(1)
    {
        //int switch;
        uint8_t PIN_READ=0x00;
 2c6:	19 82       	std	Y+1, r1	; 0x01
        PIN_READ=PIND;
 2c8:	e9 e2       	ldi	r30, 0x29	; 41
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	89 83       	std	Y+1, r24	; 0x01
        if (PIN_READ & (1<<PD1))//engine is in on state
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	88 2f       	mov	r24, r24
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	82 70       	andi	r24, 0x02	; 2
 2d8:	90 70       	andi	r25, 0x00	; 0
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	a1 f3       	breq	.-24     	; 0x2c6 <main+0xf4>
        {
            if(PIN_READ & (1<<PD2))
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	84 70       	andi	r24, 0x04	; 4
 2e6:	90 70       	andi	r25, 0x00	; 0
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <main+0x120>
            {
                AUTO_MODE();// wiper auto mode
 2ec:	0e 94 48 00 	call	0x90	; 0x90 <AUTO_MODE>
 2f0:	ea cf       	rjmp	.-44     	; 0x2c6 <main+0xf4>
            }
            else if(~(PIN_READ & (1<<PD2)))
            {
                MANUAL_MODE();// wiper manual mode
 2f2:	0e 94 93 01 	call	0x326	; 0x326 <MANUAL_MODE>
 2f6:	e7 cf       	rjmp	.-50     	; 0x2c6 <main+0xf4>

000002f8 <__vector_1>:
    TCCR1B|=((1<<CS10)|(1<<CS12));//1024 prescalar
    TCCR1B&=~(1<<CS11);
}*/

ISR(INT0_vect)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	df 93       	push	r29
 306:	cf 93       	push	r28
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
    FLAG_BIT.FLAG_ISR0 = 0;
 30c:	80 91 00 01 	lds	r24, 0x0100
 310:	8e 7f       	andi	r24, 0xFE	; 254
 312:	80 93 00 01 	sts	0x0100, r24
}
 316:	cf 91       	pop	r28
 318:	df 91       	pop	r29
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <MANUAL_MODE>:
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>

void MANUAL_MODE()
{
 326:	df 93       	push	r29
 328:	cf 93       	push	r28
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
    //SET_BIT (PORTD,PD6);
    TCCR0A |= ((1 << WGM01) | (1 << WGM00));
 32e:	a4 e4       	ldi	r26, 0x44	; 68
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e4 e4       	ldi	r30, 0x44	; 68
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	83 60       	ori	r24, 0x03	; 3
 33a:	8c 93       	st	X, r24
    TCCR0A |= (1 << COM0A1);
 33c:	a4 e4       	ldi	r26, 0x44	; 68
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e4 e4       	ldi	r30, 0x44	; 68
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	80 68       	ori	r24, 0x80	; 128
 348:	8c 93       	st	X, r24
    TCCR0A |= (1 << COM0A0);
 34a:	a4 e4       	ldi	r26, 0x44	; 68
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e4 e4       	ldi	r30, 0x44	; 68
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 64       	ori	r24, 0x40	; 64
 356:	8c 93       	st	X, r24
    TCNT0 = 0x00;
 358:	e6 e4       	ldi	r30, 0x46	; 70
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	10 82       	st	Z, r1
    OCR0A = 128;// 50% duty cycle
 35e:	e7 e4       	ldi	r30, 0x47	; 71
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	80 83       	st	Z, r24
    TCCR0B |= ((1 << CS00) | (1 << CS02));//1024 prescaler
 366:	a5 e4       	ldi	r26, 0x45	; 69
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e5 e4       	ldi	r30, 0x45	; 69
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	85 60       	ori	r24, 0x05	; 5
 372:	8c 93       	st	X, r24
    TCCR0B &= ~(1 << CS01);
 374:	a5 e4       	ldi	r26, 0x45	; 69
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e5 e4       	ldi	r30, 0x45	; 69
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	8d 7f       	andi	r24, 0xFD	; 253
 380:	8c 93       	st	X, r24
    sei();
 382:	78 94       	sei
    TCCR0B=0x00;
 384:	e5 e4       	ldi	r30, 0x45	; 69
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	10 82       	st	Z, r1
}
 38a:	cf 91       	pop	r28
 38c:	df 91       	pop	r29
 38e:	08 95       	ret

00000390 <Timer1_Init>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include <util/delay.h>

void Timer1_Init()
{
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	00 d0       	rcall	.+0      	; 0x396 <Timer1_Init+0x6>
 396:	0f 92       	push	r0
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
    char i=0;
 39c:	19 82       	std	Y+1, r1	; 0x01
    TCNT1=0x00;
 39e:	e4 e8       	ldi	r30, 0x84	; 132
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	11 82       	std	Z+1, r1	; 0x01
 3a4:	10 82       	st	Z, r1
    TCCR1A |= ((1 << WGM11) | (1 << WGM10));
 3a6:	a0 e8       	ldi	r26, 0x80	; 128
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e0 e8       	ldi	r30, 0x80	; 128
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	83 60       	ori	r24, 0x03	; 3
 3b2:	8c 93       	st	X, r24
    TCCR1A |= (1 << COM1A1);
 3b4:	a0 e8       	ldi	r26, 0x80	; 128
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	e0 e8       	ldi	r30, 0x80	; 128
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	8c 93       	st	X, r24
    TCCR1A |= (1 << COM1A0);
 3c2:	a0 e8       	ldi	r26, 0x80	; 128
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e0 e8       	ldi	r30, 0x80	; 128
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 64       	ori	r24, 0x40	; 64
 3ce:	8c 93       	st	X, r24
    TIMSK1 |= (1 << TOIE1); // Timer Overflow INT enable
 3d0:	af e6       	ldi	r26, 0x6F	; 111
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	ef e6       	ldi	r30, 0x6F	; 111
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	8c 93       	st	X, r24

 while(1)
    {
        if(TCNT1>=65536)
 3de:	e4 e8       	ldi	r30, 0x84	; 132
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	91 81       	ldd	r25, Z+1	; 0x01
        {
          i++;
        }
          if(i>=1)
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	18 16       	cp	r1, r24
 3ea:	cc f7       	brge	.-14     	; 0x3de <Timer1_Init+0x4e>
        {
            //PORTD^=(1<<PD6);//toggle pin6
            TCNT1=0x00;
 3ec:	e4 e8       	ldi	r30, 0x84	; 132
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	11 82       	std	Z+1, r1	; 0x01
 3f2:	10 82       	st	Z, r1
 3f4:	f4 cf       	rjmp	.-24     	; 0x3de <Timer1_Init+0x4e>

000003f6 <__vector_2>:
        }

    }
}
ISR(INT1_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
 402:	af 93       	push	r26
 404:	bf 93       	push	r27
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
    TCCR1B|=((1<<CS10)|(1<<CS12));//1024 prescalar
 412:	a1 e8       	ldi	r26, 0x81	; 129
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e1 e8       	ldi	r30, 0x81	; 129
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	85 60       	ori	r24, 0x05	; 5
 41e:	8c 93       	st	X, r24
    TCCR1B&=~(1<<CS11);
 420:	a1 e8       	ldi	r26, 0x81	; 129
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e1 e8       	ldi	r30, 0x81	; 129
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	8d 7f       	andi	r24, 0xFD	; 253
 42c:	8c 93       	st	X, r24
}
 42e:	cf 91       	pop	r28
 430:	df 91       	pop	r29
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	8f 91       	pop	r24
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
