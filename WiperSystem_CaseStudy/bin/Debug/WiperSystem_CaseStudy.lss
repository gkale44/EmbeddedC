
bin\Debug\WiperSystem_CaseStudy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  00000490  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 000000c0  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000168  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000432  00000000  00000000  000006bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023a  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f2  00000000  00000000  00000d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015c  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_1>
   8:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  88:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_INIT>:
#include <avr/io.h>
#include "adc.h"


void ADC_INIT(){
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
    ADCSRA |= (1<<ADEN);
  98:	aa e7       	ldi	r26, 0x7A	; 122
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8c 93       	st	X, r24
}
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <Adc_Conv>:
void Adc_Conv(){
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
    ADMUX |= ((0<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3));
  b4:	ac e7       	ldi	r26, 0x7C	; 124
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC);
  c0:	aa e7       	ldi	r26, 0x7A	; 122
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8c 93       	st	X, r24
    while (ADSC==1);
    ADC_value=ADC;
  ce:	e8 e7       	ldi	r30, 0x78	; 120
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	90 93 01 01 	sts	0x0101, r25
  da:	80 93 00 01 	sts	0x0100, r24
}
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <Stop_Conv>:
void Stop_Conv(){
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
    ADCSRA |= (0<<ADSC);
  ec:	aa e7       	ldi	r26, 0x7A	; 122
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8c 93       	st	X, r24
    ADC=0x00;
  f8:	e8 e7       	ldi	r30, 0x78	; 120
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	11 82       	std	Z+1, r1	; 0x01
  fe:	10 82       	st	Z, r1
}
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <GPIP_INIT>:
#include <avr/io.h>
#include "gpio.h"

void GPIP_INIT(){
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
    SET(DDRD,PD6);
 10e:	aa e2       	ldi	r26, 0x2A	; 42
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ea e2       	ldi	r30, 0x2A	; 42
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	8c 93       	st	X, r24
    CLR(DDRB,PC0);
 11c:	a4 e2       	ldi	r26, 0x24	; 36
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e4 e2       	ldi	r30, 0x24	; 36
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	8c 93       	st	X, r24
    SET(PORTC,PC0);
 12a:	a8 e2       	ldi	r26, 0x28	; 40
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e8 e2       	ldi	r30, 0x28	; 40
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	8c 93       	st	X, r24
    CLR(DDRD,PD2);
 138:	aa e2       	ldi	r26, 0x2A	; 42
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	ea e2       	ldi	r30, 0x2A	; 42
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	8c 93       	st	X, r24
    CLR(DDRD,PD3);
 146:	aa e2       	ldi	r26, 0x2A	; 42
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	ea e2       	ldi	r30, 0x2A	; 42
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	87 7f       	andi	r24, 0xF7	; 247
 152:	8c 93       	st	X, r24

    SET(PORTD,PD2);
 154:	ab e2       	ldi	r26, 0x2B	; 43
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	eb e2       	ldi	r30, 0x2B	; 43
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	8c 93       	st	X, r24
    CLR(PORTD,PD6);
 162:	ab e2       	ldi	r26, 0x2B	; 43
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	eb e2       	ldi	r30, 0x2B	; 43
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	8c 93       	st	X, r24
    SET(PORTD,PD3);
 170:	ab e2       	ldi	r26, 0x2B	; 43
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	eb e2       	ldi	r30, 0x2B	; 43
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	8c 93       	st	X, r24
}
 17e:	cf 91       	pop	r28
 180:	df 91       	pop	r29
 182:	08 95       	ret

00000184 <INTERRUPT_INIT>:
#include <avr/io.h>
#include "interrupt.h"

void INTERRUPT_INIT(){
 184:	df 93       	push	r29
 186:	cf 93       	push	r28
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
    EICRA |= ((1<<ISC00)|(1<<ISC10));
 18c:	a9 e6       	ldi	r26, 0x69	; 105
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e9 e6       	ldi	r30, 0x69	; 105
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	85 60       	ori	r24, 0x05	; 5
 198:	8c 93       	st	X, r24
    EIMSK |= ((1<<INT0)|(1<<INT1));
 19a:	ad e3       	ldi	r26, 0x3D	; 61
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	ed e3       	ldi	r30, 0x3D	; 61
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	83 60       	ori	r24, 0x03	; 3
 1a6:	8c 93       	st	X, r24
}
 1a8:	cf 91       	pop	r28
 1aa:	df 91       	pop	r29
 1ac:	08 95       	ret

000001ae <main>:
uint8_t Ignition;
uint8_t Mode;
uint8_t Ind;
uint8_t Count;

int main(void){
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
    GPIP_INIT();
 1b6:	0e 94 83 00 	call	0x106	; 0x106 <GPIP_INIT>
    INTERRUPT_INIT();
 1ba:	0e 94 c2 00 	call	0x184	; 0x184 <INTERRUPT_INIT>
    PWM_INIT();
 1be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <PWM_INIT>
    ADC_INIT();
 1c2:	0e 94 48 00 	call	0x90	; 0x90 <ADC_INIT>
    TIMER_INIT();
 1c6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <TIMER_INIT>
    sei();
 1ca:	78 94       	sei

    while(1){
        if(Ignition && Mode){
 1cc:	80 91 05 01 	lds	r24, 0x0105
 1d0:	88 23       	and	r24, r24
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <main+0x28>
 1d4:	75 c0       	rjmp	.+234    	; 0x2c0 <main+0x112>
 1d6:	80 91 03 01 	lds	r24, 0x0103
 1da:	88 23       	and	r24, r24
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <main+0x32>
 1de:	70 c0       	rjmp	.+224    	; 0x2c0 <main+0x112>
            CLR(PORTB,PB4);
 1e0:	a5 e2       	ldi	r26, 0x25	; 37
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e5 e2       	ldi	r30, 0x25	; 37
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	8f 7e       	andi	r24, 0xEF	; 239
 1ec:	8c 93       	st	X, r24
            Adc_Conv();
 1ee:	0e 94 56 00 	call	0xac	; 0xac <Adc_Conv>
            START_TIMER;
 1f2:	a0 e7       	ldi	r26, 0x70	; 112
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e0 e7       	ldi	r30, 0x70	; 112
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	8c 93       	st	X, r24
            if(Ind){
 200:	80 91 02 01 	lds	r24, 0x0102
 204:	88 23       	and	r24, r24
 206:	11 f3       	breq	.-60     	; 0x1cc <main+0x1e>
                SET(PORTB,PB4);
 208:	a5 e2       	ldi	r26, 0x25	; 37
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e5 e2       	ldi	r30, 0x25	; 37
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 61       	ori	r24, 0x10	; 16
 214:	8c 93       	st	X, r24
                if(ADC_value>=0 && ADC_value<=50){
 216:	80 91 00 01 	lds	r24, 0x0100
 21a:	90 91 01 01 	lds	r25, 0x0101
 21e:	83 33       	cpi	r24, 0x33	; 51
 220:	91 05       	cpc	r25, r1
 222:	20 f4       	brcc	.+8      	; 0x22c <main+0x7e>
                    SET_PWM_VALUE(0);
 224:	e7 e4       	ldi	r30, 0x47	; 71
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	10 82       	st	Z, r1
 22a:	d0 cf       	rjmp	.-96     	; 0x1cc <main+0x1e>
                }else if(ADC_value>=50 && ADC_value<=200){
 22c:	80 91 00 01 	lds	r24, 0x0100
 230:	90 91 01 01 	lds	r25, 0x0101
 234:	82 33       	cpi	r24, 0x32	; 50
 236:	91 05       	cpc	r25, r1
 238:	60 f0       	brcs	.+24     	; 0x252 <main+0xa4>
 23a:	80 91 00 01 	lds	r24, 0x0100
 23e:	90 91 01 01 	lds	r25, 0x0101
 242:	89 3c       	cpi	r24, 0xC9	; 201
 244:	91 05       	cpc	r25, r1
 246:	28 f4       	brcc	.+10     	; 0x252 <main+0xa4>
                    SET_PWM_VALUE(64);
 248:	e7 e4       	ldi	r30, 0x47	; 71
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 e4       	ldi	r24, 0x40	; 64
 24e:	80 83       	st	Z, r24
 250:	bd cf       	rjmp	.-134    	; 0x1cc <main+0x1e>
                }else if(ADC_value>=200 && ADC_value<=500){
 252:	80 91 00 01 	lds	r24, 0x0100
 256:	90 91 01 01 	lds	r25, 0x0101
 25a:	88 3c       	cpi	r24, 0xC8	; 200
 25c:	91 05       	cpc	r25, r1
 25e:	68 f0       	brcs	.+26     	; 0x27a <main+0xcc>
 260:	80 91 00 01 	lds	r24, 0x0100
 264:	90 91 01 01 	lds	r25, 0x0101
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	85 3f       	cpi	r24, 0xF5	; 245
 26c:	92 07       	cpc	r25, r18
 26e:	28 f4       	brcc	.+10     	; 0x27a <main+0xcc>
                    SET_PWM_VALUE(128);
 270:	e7 e4       	ldi	r30, 0x47	; 71
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	80 83       	st	Z, r24
 278:	a9 cf       	rjmp	.-174    	; 0x1cc <main+0x1e>
                }else if(ADC_value>=500 && ADC_value<=1000){
 27a:	80 91 00 01 	lds	r24, 0x0100
 27e:	90 91 01 01 	lds	r25, 0x0101
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	84 3f       	cpi	r24, 0xF4	; 244
 286:	92 07       	cpc	r25, r18
 288:	68 f0       	brcs	.+26     	; 0x2a4 <main+0xf6>
 28a:	80 91 00 01 	lds	r24, 0x0100
 28e:	90 91 01 01 	lds	r25, 0x0101
 292:	23 e0       	ldi	r18, 0x03	; 3
 294:	89 3e       	cpi	r24, 0xE9	; 233
 296:	92 07       	cpc	r25, r18
 298:	28 f4       	brcc	.+10     	; 0x2a4 <main+0xf6>
                    SET_PWM_VALUE(192);
 29a:	e7 e4       	ldi	r30, 0x47	; 71
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	80 83       	st	Z, r24
 2a2:	94 cf       	rjmp	.-216    	; 0x1cc <main+0x1e>
                }else if(ADC_value>1000){
 2a4:	80 91 00 01 	lds	r24, 0x0100
 2a8:	90 91 01 01 	lds	r25, 0x0101
 2ac:	23 e0       	ldi	r18, 0x03	; 3
 2ae:	89 3e       	cpi	r24, 0xE9	; 233
 2b0:	92 07       	cpc	r25, r18
 2b2:	08 f4       	brcc	.+2      	; 0x2b6 <main+0x108>
 2b4:	8b cf       	rjmp	.-234    	; 0x1cc <main+0x1e>
                    SET_PWM_VALUE(255);
 2b6:	e7 e4       	ldi	r30, 0x47	; 71
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	80 83       	st	Z, r24
 2be:	86 cf       	rjmp	.-244    	; 0x1cc <main+0x1e>
                }
            }
        }else if (Ignition && !Mode){
 2c0:	80 91 05 01 	lds	r24, 0x0105
 2c4:	88 23       	and	r24, r24
 2c6:	49 f0       	breq	.+18     	; 0x2da <main+0x12c>
 2c8:	80 91 03 01 	lds	r24, 0x0103
 2cc:	88 23       	and	r24, r24
 2ce:	29 f4       	brne	.+10     	; 0x2da <main+0x12c>
                SET_PWM_VALUE(128);
 2d0:	e7 e4       	ldi	r30, 0x47	; 71
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	80 83       	st	Z, r24
 2d8:	79 cf       	rjmp	.-270    	; 0x1cc <main+0x1e>
            }else{
            STOP_TIMER;
 2da:	a0 e7       	ldi	r26, 0x70	; 112
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e0 e7       	ldi	r30, 0x70	; 112
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	8c 93       	st	X, r24
            Stop_Conv();
 2e6:	0e 94 72 00 	call	0xe4	; 0xe4 <Stop_Conv>
            CLR(PORTB,PB4);
 2ea:	a5 e2       	ldi	r26, 0x25	; 37
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	e5 e2       	ldi	r30, 0x25	; 37
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7e       	andi	r24, 0xEF	; 239
 2f6:	8c 93       	st	X, r24
            SET_PWM_VALUE(0);
 2f8:	e7 e4       	ldi	r30, 0x47	; 71
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	10 82       	st	Z, r1
            Ind=0;
 2fe:	10 92 02 01 	sts	0x0102, r1
 302:	64 cf       	rjmp	.-312    	; 0x1cc <main+0x1e>

00000304 <__vector_1>:
        }
    }
    return 0;
}
ISR(INT0_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
    Mode =~ Mode;
 318:	80 91 03 01 	lds	r24, 0x0103
 31c:	80 95       	com	r24
 31e:	80 93 03 01 	sts	0x0103, r24
}
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	8f 91       	pop	r24
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_2>:

ISR(INT1_vect){
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	8f 93       	push	r24
 33e:	df 93       	push	r29
 340:	cf 93       	push	r28
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
    Ignition =~ Ignition;
 346:	80 91 05 01 	lds	r24, 0x0105
 34a:	80 95       	com	r24
 34c:	80 93 05 01 	sts	0x0105, r24
}
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	8f 91       	pop	r24
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_9>:


ISR(TIMER2_OVF_vect){
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	8f 93       	push	r24
 36c:	df 93       	push	r29
 36e:	cf 93       	push	r28
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
    Count++;
 374:	80 91 04 01 	lds	r24, 0x0104
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	80 93 04 01 	sts	0x0104, r24
    if(Count>=240){
 37e:	80 91 04 01 	lds	r24, 0x0104
 382:	80 3f       	cpi	r24, 0xF0	; 240
 384:	28 f0       	brcs	.+10     	; 0x390 <__vector_9+0x30>
        Count=0;
 386:	10 92 04 01 	sts	0x0104, r1
        Ind=1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 02 01 	sts	0x0102, r24
    }
}
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <PWM_INIT>:
#include <avr/io.h>
#include "pwm.h"

void PWM_INIT(){
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
    TCNT0 =0x00;  // give access to timer and Counter
 3a8:	e6 e4       	ldi	r30, 0x46	; 70
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	10 82       	st	Z, r1
    TCCR0A |= ((1<<WGM00)|(1<<WGM01)|(1<<COM0A1)); // enabled the Mode and effect
 3ae:	a4 e4       	ldi	r26, 0x44	; 68
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e4 e4       	ldi	r30, 0x44	; 68
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	83 68       	ori	r24, 0x83	; 131
 3ba:	8c 93       	st	X, r24
    TCCR0B |= ((1<<CS02)|(0<<CS01)|(1<<CS00)); //clock and WGM02
 3bc:	a5 e4       	ldi	r26, 0x45	; 69
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	e5 e4       	ldi	r30, 0x45	; 69
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	85 60       	ori	r24, 0x05	; 5
 3c8:	8c 93       	st	X, r24
}
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <TIMER_INIT>:
#include <avr/io.h>
#include "timer.h"

void TIMER_INIT()
{
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
    TCNT2=0x00;
 3d8:	e2 eb       	ldi	r30, 0xB2	; 178
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	10 82       	st	Z, r1
    TCCR2A=0x00;
 3de:	e0 eb       	ldi	r30, 0xB0	; 176
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	10 82       	st	Z, r1
    TCCR2B |=((1<<CS22)|(1<<CS21)|(1<<CS20));
 3e4:	a1 eb       	ldi	r26, 0xB1	; 177
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e1 eb       	ldi	r30, 0xB1	; 177
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	87 60       	ori	r24, 0x07	; 7
 3f0:	8c 93       	st	X, r24
}
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
