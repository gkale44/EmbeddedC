
bin\Debug\practice_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001fa  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000054  00000000  00000000  0000021d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015a  00000000  00000000  00000271  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ee  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000184  00000000  00000000  000004b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000bb  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define CLR_BIT(PORT,BIT) PORT&=~(1<<BIT);
#define TOGGLE_BIT(PORT,BIT) PORT^= (1 << BIT);
volatile uint16_t counter = 0x00;

int main(void)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(DDRD,PD7);//OUTPUT
  98:	aa e2       	ldi	r26, 0x2A	; 42
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	ea e2       	ldi	r30, 0x2A	; 42
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD2);//INPUT
  a6:	aa e2       	ldi	r26, 0x2A	; 42
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	ea e2       	ldi	r30, 0x2A	; 42
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD2);//PULL UP CONFIGURATION
  b4:	ab e2       	ldi	r26, 0x2B	; 43
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	eb e2       	ldi	r30, 0x2B	; 43
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	8c 93       	st	X, r24
    TCCR0A= 0x00;
  c2:	e4 e4       	ldi	r30, 0x44	; 68
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
    TCNT0=0x00;
  c8:	e6 e4       	ldi	r30, 0x46	; 70
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
    TCCR0B |=(1<<CS00) | (1<<CS02);
  ce:	a5 e4       	ldi	r26, 0x45	; 69
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e5 e4       	ldi	r30, 0x45	; 69
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	8c 93       	st	X, r24
    TCCR0B &=~(1<<CS01);
  dc:	a5 e4       	ldi	r26, 0x45	; 69
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e5 e4       	ldi	r30, 0x45	; 69
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	8c 93       	st	X, r24
    TIMSK0 |= (1 << TOIE0);
  ea:	ae e6       	ldi	r26, 0x6E	; 110
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	ee e6       	ldi	r30, 0x6E	; 110
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	8c 93       	st	X, r24
    //EICRA|=(1<<CS00);
    //EICRA &=~(1<<CS01);
    //EIMSK|=(1<<INT0);
    sei();
  f8:	78 94       	sei
    //unsigned int i;
while(1)
{
         PORTD^=(1<<PD7);
  fa:	ab e2       	ldi	r26, 0x2B	; 43
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	eb e2       	ldi	r30, 0x2B	; 43
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	89 27       	eor	r24, r25
 108:	8c 93       	st	X, r24
 10a:	f7 cf       	rjmp	.-18     	; 0xfa <main+0x6a>

0000010c <__vector_16>:
}

    return 0;
}
ISR(TIMER0_OVF_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62

  counter++;
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	90 91 01 01 	lds	r25, 0x0101
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 01 01 	sts	0x0101, r25
 132:	80 93 00 01 	sts	0x0100, r24

  if (counter >= 305) {
 136:	80 91 00 01 	lds	r24, 0x0100
 13a:	90 91 01 01 	lds	r25, 0x0101
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	81 33       	cpi	r24, 0x31	; 49
 142:	92 07       	cpc	r25, r18
 144:	20 f0       	brcs	.+8      	; 0x14e <__vector_16+0x42>
    //FLAG_BIT.FLAG_ISR1 = 1;
    counter = 0;
 146:	10 92 01 01 	sts	0x0101, r1
 14a:	10 92 00 01 	sts	0x0100, r1
  }
}
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
