
bin\Debug\case_study.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  0000038c  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000080  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a5  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b8  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ae  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bb  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fe  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  88:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO>:
#include <util/delay.h>
#include "WIPER_AUTO.h"
#include "WIPER_MANUAL.h"

void GPIO()
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(DDRD,PD1);
  98:	aa e2       	ldi	r26, 0x2A	; 42
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	ea e2       	ldi	r30, 0x2A	; 42
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8d 7f       	andi	r24, 0xFD	; 253
  a4:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD2);
  a6:	aa e2       	ldi	r26, 0x2A	; 42
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	ea e2       	ldi	r30, 0x2A	; 42
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD1);
  b4:	ab e2       	ldi	r26, 0x2B	; 43
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	eb e2       	ldi	r30, 0x2B	; 43
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	8c 93       	st	X, r24
    //SET_BIT (PORTD,PD2);// PULL UP CONFIGURATION
    CLR_BIT(DDRC,PC0); //Rain Sensor at input
  c2:	a7 e2       	ldi	r26, 0x27	; 39
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e7 e2       	ldi	r30, 0x27	; 39
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	8c 93       	st	X, r24
    //CLR_BIT(PORTC,PC0);//Potentiometer connected at pin PC0
    SET_BIT(DDRD,PD6);//PWMout at output
  d0:	aa e2       	ldi	r26, 0x2A	; 42
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	ea e2       	ldi	r30, 0x2A	; 42
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8c 93       	st	X, r24
    //SET_BIT(PORTD,PD6);// output at pin no 6*/
}
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

//uint16_t ADC_value=0x00;
int main(void)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
     GPIO();
  ee:	0e 94 48 00 	call	0x90	; 0x90 <GPIO>

    TCCR0A |= ((1 << WGM01) | (1 << WGM00));
  f2:	a4 e4       	ldi	r26, 0x44	; 68
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e4 e4       	ldi	r30, 0x44	; 68
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	8c 93       	st	X, r24
    TCCR0A |= (1 << COM0A1);
 100:	a4 e4       	ldi	r26, 0x44	; 68
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e4 e4       	ldi	r30, 0x44	; 68
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8c 93       	st	X, r24
    TCCR0A |= (1 << COM0A0);
 10e:	a4 e4       	ldi	r26, 0x44	; 68
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e4 e4       	ldi	r30, 0x44	; 68
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	8c 93       	st	X, r24
    TCNT0 = 0x00;
 11c:	e6 e4       	ldi	r30, 0x46	; 70
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
    TCCR0B |= ((1 << CS00) | (1 << CS02));//1024 prescaler
 122:	a5 e4       	ldi	r26, 0x45	; 69
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e5 e4       	ldi	r30, 0x45	; 69
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	85 60       	ori	r24, 0x05	; 5
 12e:	8c 93       	st	X, r24
    TCCR0B &= ~(1 << CS01);
 130:	a5 e4       	ldi	r26, 0x45	; 69
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e5 e4       	ldi	r30, 0x45	; 69
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	8c 93       	st	X, r24
    EICRA |= (1 << ISC00);
 13e:	a9 e6       	ldi	r26, 0x69	; 105
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e9 e6       	ldi	r30, 0x69	; 105
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	8c 93       	st	X, r24
    EICRA &= ~(1 << ISC01); //Any logical change will raise interrupt.
 14c:	a9 e6       	ldi	r26, 0x69	; 105
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e9 e6       	ldi	r30, 0x69	; 105
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	8c 93       	st	X, r24
    EIMSK |= (1 << INT0); //Local Interrupt enable
 15a:	ad e3       	ldi	r26, 0x3D	; 61
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	ed e3       	ldi	r30, 0x3D	; 61
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	8c 93       	st	X, r24
    sei();
 168:	78 94       	sei
while(1)
    {
    uint8_t PIN_READ=0x00;
 16a:	19 82       	std	Y+1, r1	; 0x01
    PIN_READ=PIND;
 16c:	e9 e2       	ldi	r30, 0x29	; 41
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	89 83       	std	Y+1, r24	; 0x01
    if (PIN_READ & (1<<PD1))
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	82 70       	andi	r24, 0x02	; 2
 17c:	90 70       	andi	r25, 0x00	; 0
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	79 f0       	breq	.+30     	; 0x1a0 <main+0xbc>
    {
        if (PIN_READ & (1<<PD2))
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	88 2f       	mov	r24, r24
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	84 70       	andi	r24, 0x04	; 4
 18a:	90 70       	andi	r25, 0x00	; 0
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	21 f0       	breq	.+8      	; 0x198 <main+0xb4>
        {
            OCR0A=0;
 190:	e7 e4       	ldi	r30, 0x47	; 71
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	10 82       	st	Z, r1
 196:	17 c0       	rjmp	.+46     	; 0x1c6 <main+0xe2>
        }
        else
        {
            OCR0A=0;
 198:	e7 e4       	ldi	r30, 0x47	; 71
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	10 82       	st	Z, r1
 19e:	13 c0       	rjmp	.+38     	; 0x1c6 <main+0xe2>
        }
    }
    else   if (PIN_READ & (1<<PD1))//engine is in on state
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	82 70       	andi	r24, 0x02	; 2
 1a8:	90 70       	andi	r25, 0x00	; 0
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	61 f0       	breq	.+24     	; 0x1c6 <main+0xe2>
        {
            if(PIN_READ & (1<<PD2))
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	84 70       	andi	r24, 0x04	; 4
 1b6:	90 70       	andi	r25, 0x00	; 0
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <main+0xde>
            {
               WIPER_AUTO();// wiper auto mode
 1bc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <WIPER_AUTO>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <main+0xe2>
            }
            else if((PIN_READ | (1<<PD2)))
            {
                 WIPER_MANUAL();// wiper manual mode
 1c2:	0e 94 6f 01 	call	0x2de	; 0x2de <WIPER_MANUAL>

            }
        }

  return 0;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
}


}
 1ca:	0f 90       	pop	r0
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <WIPER_AUTO>:
#include<avr/interrupt.h>
#include<util/delay.h>

uint16_t ADC_value=0x00;
void WIPER_AUTO()
{
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	0f 92       	push	r0
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
    ADMUX &=0x00;
 1dc:	ec e7       	ldi	r30, 0x7C	; 124
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	20 81       	ld	r18, Z
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	10 82       	st	Z, r1
    ADMUX |= (1 << REFS0);
 1e8:	ac e7       	ldi	r26, 0x7C	; 124
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	ec e7       	ldi	r30, 0x7C	; 124
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	8c 93       	st	X, r24
    ADCSRA |= (1<< ADEN);
 1f6:	aa e7       	ldi	r26, 0x7A	; 122
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	ea e7       	ldi	r30, 0x7A	; 122
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8c 93       	st	X, r24
    //OCR0A=0;
    while(1)
    {
        ADCSRA |= (1 << ADSC);
 204:	aa e7       	ldi	r26, 0x7A	; 122
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	ea e7       	ldi	r30, 0x7A	; 122
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	8c 93       	st	X, r24
        while (ADCSRA & (1 << ADSC));
 212:	ea e7       	ldi	r30, 0x7A	; 122
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	80 74       	andi	r24, 0x40	; 64
 21e:	90 70       	andi	r25, 0x00	; 0
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	b9 f7       	brne	.-18     	; 0x212 <WIPER_AUTO+0x40>
        ADC_value=ADC;
 224:	e8 e7       	ldi	r30, 0x78	; 120
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	91 81       	ldd	r25, Z+1	; 0x01
 22c:	90 93 01 01 	sts	0x0101, r25
 230:	80 93 00 01 	sts	0x0100, r24

        if((ADC_value>=0) && (ADC_value<50))
 234:	80 91 00 01 	lds	r24, 0x0100
 238:	90 91 01 01 	lds	r25, 0x0101
 23c:	82 33       	cpi	r24, 0x32	; 50
 23e:	91 05       	cpc	r25, r1
 240:	20 f4       	brcc	.+8      	; 0x24a <WIPER_AUTO+0x78>
        {
            OCR0A = 0x00;
 242:	e7 e4       	ldi	r30, 0x47	; 71
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	10 82       	st	Z, r1
 248:	dd cf       	rjmp	.-70     	; 0x204 <WIPER_AUTO+0x32>
        }
        else if((ADC_value>=50) && (ADC_value<200))
 24a:	80 91 00 01 	lds	r24, 0x0100
 24e:	90 91 01 01 	lds	r25, 0x0101
 252:	82 33       	cpi	r24, 0x32	; 50
 254:	91 05       	cpc	r25, r1
 256:	60 f0       	brcs	.+24     	; 0x270 <WIPER_AUTO+0x9e>
 258:	80 91 00 01 	lds	r24, 0x0100
 25c:	90 91 01 01 	lds	r25, 0x0101
 260:	88 3c       	cpi	r24, 0xC8	; 200
 262:	91 05       	cpc	r25, r1
 264:	28 f4       	brcc	.+10     	; 0x270 <WIPER_AUTO+0x9e>
        {
            OCR0A = 64;
 266:	e7 e4       	ldi	r30, 0x47	; 71
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 e4       	ldi	r24, 0x40	; 64
 26c:	80 83       	st	Z, r24
 26e:	ca cf       	rjmp	.-108    	; 0x204 <WIPER_AUTO+0x32>
        }
        else if((ADC_value>=200) && (ADC_value<500))
 270:	80 91 00 01 	lds	r24, 0x0100
 274:	90 91 01 01 	lds	r25, 0x0101
 278:	88 3c       	cpi	r24, 0xC8	; 200
 27a:	91 05       	cpc	r25, r1
 27c:	68 f0       	brcs	.+26     	; 0x298 <WIPER_AUTO+0xc6>
 27e:	80 91 00 01 	lds	r24, 0x0100
 282:	90 91 01 01 	lds	r25, 0x0101
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	84 3f       	cpi	r24, 0xF4	; 244
 28a:	92 07       	cpc	r25, r18
 28c:	28 f4       	brcc	.+10     	; 0x298 <WIPER_AUTO+0xc6>
        {
            OCR0A = 128;
 28e:	e7 e4       	ldi	r30, 0x47	; 71
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	80 83       	st	Z, r24
 296:	b6 cf       	rjmp	.-148    	; 0x204 <WIPER_AUTO+0x32>
        }
        else if((ADC_value>=500) && (ADC_value<1000))
 298:	80 91 00 01 	lds	r24, 0x0100
 29c:	90 91 01 01 	lds	r25, 0x0101
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	84 3f       	cpi	r24, 0xF4	; 244
 2a4:	92 07       	cpc	r25, r18
 2a6:	68 f0       	brcs	.+26     	; 0x2c2 <WIPER_AUTO+0xf0>
 2a8:	80 91 00 01 	lds	r24, 0x0100
 2ac:	90 91 01 01 	lds	r25, 0x0101
 2b0:	23 e0       	ldi	r18, 0x03	; 3
 2b2:	88 3e       	cpi	r24, 0xE8	; 232
 2b4:	92 07       	cpc	r25, r18
 2b6:	28 f4       	brcc	.+10     	; 0x2c2 <WIPER_AUTO+0xf0>
        {
            OCR0A = 192;
 2b8:	e7 e4       	ldi	r30, 0x47	; 71
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 ec       	ldi	r24, 0xC0	; 192
 2be:	80 83       	st	Z, r24
 2c0:	a1 cf       	rjmp	.-190    	; 0x204 <WIPER_AUTO+0x32>
        }
        else if(ADC_value>=1000)
 2c2:	80 91 00 01 	lds	r24, 0x0100
 2c6:	90 91 01 01 	lds	r25, 0x0101
 2ca:	23 e0       	ldi	r18, 0x03	; 3
 2cc:	88 3e       	cpi	r24, 0xE8	; 232
 2ce:	92 07       	cpc	r25, r18
 2d0:	08 f4       	brcc	.+2      	; 0x2d4 <WIPER_AUTO+0x102>
 2d2:	98 cf       	rjmp	.-208    	; 0x204 <WIPER_AUTO+0x32>
        {
            OCR0A = 255;
 2d4:	e7 e4       	ldi	r30, 0x47	; 71
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	80 83       	st	Z, r24
 2dc:	93 cf       	rjmp	.-218    	; 0x204 <WIPER_AUTO+0x32>

000002de <WIPER_MANUAL>:
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>

void WIPER_MANUAL()
{
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
    OCR0A=128; //50% duty cycle
 2e6:	e7 e4       	ldi	r30, 0x47	; 71
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 e8       	ldi	r24, 0x80	; 128
 2ec:	80 83       	st	Z, r24
    //_delay_ms(1000);
    //TCCR0B = 0x00;

}
 2ee:	cf 91       	pop	r28
 2f0:	df 91       	pop	r29
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
